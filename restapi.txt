REST api

Version1
Basic to good understanding of js
An appreciation / basic grasp of node.js and MongoDB

API 
Application Programming Interface
REST
REpresentational State Transfer

TV -essential application, want to interact with it you reach for the remote
Remote is an interface to interact with the application

Youtube application, get a list of videos, youtube provides interface, a series of endpoints
Use endpoints from our code.
Instead of human interfrace you use a programming interface.
Popular application
Youtube
Google maps
Twitter
Uber

Use a specific endpoint, make a request and retrieve a list of drivers in a given area.  Return it in json format and display it to our users

REST-REpresentational State Transfer
Architectual style of the web
A standard/ set of guidelines by which we can structure & create APIs
REST API have identifiable properties
They make use of resource based URLs
Webpage http://www.football.com/scores
http://www.football.com/teams/arsenal

JSON- http://www.football.com/api/scores
http://www.football.com/api/teams/arsenal

Send JSON data and allows you resources, 
REST makes use of HTTP Methods
GET- Used to retrieve data from the server
POST- Used to send data to the server
PUT- Used to update data
Delete- Used to delete data

They make use of status codes
200 everything’s ok
404 means resource cannot be found

Version2.0
Installed npm init
To add package.json

Making an application using express
MongoDB to NodeJS and Express app then puts the endpoints to Front-end, mobile app, or other website

Other website is sending get request to node js.  Get list from mongo db and send them back in json format and allows them to be used in the way the developer wants


Version3.0
HTTP methods 
A way of telling the server what type of request we are making
GET
POST
PUT 
DELETE

Goes from front end application to node/express then goes to database/ mongoDB, 

Post creates new data
Get- reading/ retrieving a list 
PUT -update/ edit an existing ninja
Delete- delete data from the db
Db- database

API Routes- Certain routes or endpoints API exposes to us
GET and POST
http://www.ninago.com/api/ninjas

PUT/Delete
http://www.ninago.com/api/ninjas/id
Id- represents the specific record or ninja we want to update

What type of request we are making.  Using jquery, using end points when it reaches the server takes the data and adds it to the database.  Has same url but adds different data to it.


Version4.0
Dont actually need to use express to make it possible but it makes it easier
Installed express-npm install express --save
--save, saves as a dependency
Require express const express = require(“express”)
const app = express();

Version5.0
Handle requests in express
Set up routes and create route handlers

app.get("/"); is listening for get requests

Somebody makes a get request it can respond in the function
app.get("/", function(){
	
});
Still waiting for a response when broswer is spinning...you have to send a response
Send a request and the server then responds to the client

GET and POST use different URLs
How we handle a request

Version6.0
Installed- npm install nodemon --save-dev
Automatically restarts program when saved

Separate routes into logical components
Using express route class
Need express in api file
Need to enable router by “const router = express.Router();”

Exports routes to use in another file
Export using “module.exports = router;”
How do we say to our express apps we want to use these routes 
We can use a method called use
Used const routes = require("./routes/api") in index.js then called the function via app.use(routes);

Version6.5
MongoDB running in background then node.js and express App corresponding to Front-end Mobile App and Other Website
Need to stimulate requests for Post Put and Delete

version 7.0
Send data in json
Send request in post body
Using postman set to post go to body and select raw
Received back POST request
Node js and express dont let us store the data anywhere
We need to install body parser
Body parser is middleware
Request goes to express app.  Handles it and gives to route handler and sends the response.
Middleware is handled after request gets sent and before it gets sent out
If we want to use body parser we use it as the request gets received
Attached to request object

Installed Body-parser
npm install body-parser --save
Saved as dependency
Need to use above the .use()
Bodyparser can access multiple data points and we want to use json data

Changed POST request in api.js
//add a new ninja to the db
router.post("/ninjas", function(req, res){
	console.log(req.body);
	res.send({
		type: "POST",
		name: req.body.name,
		rank: req.body.rank
	});
});
Sent back data received.
